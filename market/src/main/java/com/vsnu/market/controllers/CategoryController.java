package com.vsnu.market.controllers;

import com.vsnu.market.dtos.CategoryDto;
import com.vsnu.market.entities.Item;
import com.vsnu.market.mappers.CategoryMapper;
import com.vsnu.market.repositories.CategoryRepository;
import com.vsnu.market.repositories.ItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Random;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/categories") // This means URL's start with /demo (after Application path)
public class CategoryController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CategoryRepository categoryRepository;

    @Autowired
    private ItemRepository itemRepository;


    @GetMapping(path="/all")
    public @ResponseBody List<CategoryDto> getAllCategories() {
        // This returns a JSON or XML with the users
        return CategoryMapper.MAPPER.toCategoryDTOs(categoryRepository.findAll());
    }

    @PutMapping(path="/updateDiscount")
    public @ResponseBody String randomlyAddDiscount(@RequestBody String passkey) {
        if ("saflnaelfalwflwaouh2398iv298zck!123".equals(passkey)){

            final List<Integer> categoryIds = categoryRepository.fetchCategoryIds();
            Random rand = new Random();
            LocalDateTime dt = LocalDateTime.now().plusDays(1);

            categoryIds.forEach(id -> {
                List<Integer> itemIds = itemRepository.fetchIdsByCategoryId(id);

                Integer idToUpdate = itemIds.get(rand.nextInt(itemIds.size()));

                Optional<Item> item = itemRepository.findById(idToUpdate);

                if(item.isPresent()){
                    Item item1 = item.get();
                    item1.setDiscount(10);
                    item1.setDiscountExpiry(dt);
                    itemRepository.save(item1);
                }
            });
            return "success";
        } else {
            return "failure";
        }
    }
}